name: Create Release
on: push
jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Get current version
        run: |
          export PYTHONPATH=$PYTHONPATH:flowcept
          export CURRENT_VERSION=`python -c "from flowcept import __version__; print(__version__)"`
          echo $CURRENT_VERSION
      - name: Create Release
        run: |
            REPOSITORY=${{ github.repository }}
            ACCESS_TOKEN=${{ secrets.GITHUB_TOKEN  }}
            TARGET=${{ github.ref_name }}
            echo $TARGET
            TARGET=${GITHUB_REF##*/}
            echo $CURRENT_VERSION
            curl --data '{"tag_name": "v$VERSION",
                            "target_commitish": "$TARGET",
                            "name": "v$CURRENT_VERSION",
                            "body": "Release of version $CURRENT_VERSION",
                            "draft": true,
                            "prerelease": true}' \
                -H "Authorization: Bearer $ACCESS_TOKEN" \
                https://api.github.com/repos/${REPOSITORY}/releases

#      - name: "Create release"
#        uses: "actions/github-script@v5"
#        env:
#          CURRENT_VERSION: "${CURRENT_VERSION}"
#        with:
#          github-token: "${{ secrets.GITHUB_TOKEN }}"
#          script: |
#            try {
#              console.log(process.env.CURRENT_VERSION);
#              await github.rest.repos.createRelease({
#                draft: false,
#                generate_release_notes: true,
#                name: process.env.CURRENT_VERSION,
#                owner: context.repo.owner,
#                prerelease: true,
#                repo: context.repo.repo,
#                tag_name: process.env.CURRENT_VERSION,
#              });
#            } catch (error) {
#              core.setFailed(error.message);
#            }
