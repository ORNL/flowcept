name: All tests on Kafka MQ
on:
  pull_request:
    branches: [ "dev", "main" ]
    types: [opened, synchronize, reopened]

jobs:

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: "!contains(github.event.head_commit.message, 'CI Bot')"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Copy settings file
        run: |
          mkdir ~/.flowcept
          cp resources/sample_settings.yaml ~/.flowcept
          mv ~/.flowcept/sample_settings.yaml ~/.flowcept/settings.yaml

      - name: Install package and dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install .[dev]

      - name: Run docker compose
        run: docker compose -f deployment/compose-kafka.yml up -d

      - name: Wait for one minute
        run: sleep 60

      - name: Check liveness
        run: |
          export MQ_TYPE=kafka
          export MQ_PORT=9092
          python -c 'from flowcept.configs import MQ_TYPE, MQ_PORT; print(f"MQ_TYPE={MQ_TYPE}"); print(f"MQ_TYPE={MQ_PORT}")'
          python -c 'from flowcept import Flowcept; assert Flowcept.services_alive()'

      - name: Run tests with kafka
        run: |
          export MQ_TYPE=kafka
          export MQ_PORT=9092
          pytest --ignore=tests/decorator_tests/ml_tests/llm_tests

      - name: Test notebooks
        run: |
          pip install -e .[full]
          export MQ_TYPE=kafka
          export MQ_PORT=9092
          python -c 'from flowcept.configs import MQ_TYPE, MQ_PORT; print(f"MQ_TYPE={MQ_TYPE}"); print(f"MQ_TYPE={MQ_PORT}")'
          python -c 'from flowcept import Flowcept; assert Flowcept.services_alive()'

          python flowcept/flowcept_webserver/app.py &
          sleep 3
          export FLOWCEPT_SETTINGS_PATH=~/.flowcept/settings.yaml
          pytest --ignore=notebooks/zambeze.ipynb --nbmake "notebooks/" --nbmake-timeout=600 --ignore=notebooks/dask_from_CLI.ipynb
